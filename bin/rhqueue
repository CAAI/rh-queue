#!/usr/bin/env python3
import argparse
import subprocess
import os
import datetime
import sys
import getpass
from typing import List
from rhqueue import *


class RHQueueParser(object):

  def __init__(self):
    self.processor = ScriptCreatorClass()

    # Main Parser
    parser = argparse.ArgumentParser(description="RHQueue")
    subparsers = parser.add_subparsers(
      help="The subcommand to run options are {queue,remove,info}",
      dest="command"
      )
    
    # Queue Parser
    parser_queue = subparsers.add_parser("queue", help="Used to queue scripts")
    group = parser_queue.add_mutually_exclusive_group()
    parser_queue.add_argument(
        "script",
        metavar="script",
        type=str,
        help="The script to run on a gpu\n" +
        "at the top of each file there must be the shebang '#!/usr/bin/env python -u\n"
    )
    # venv defaults
    venv = os.environ.get("RHQ_VENV", "")
    venv = os.environ.get("VIRTUAL_ENV", venv)
    group.add_argument(
        "-v",
        "--venv",
        metavar="venv",
        type=str,
        help="The virtual environment used for the project",
        default=venv
    )
    group.add_argument(
      "-c",
      "--conda-venv",
      metavar="condaVenv",
      type=str,
      help="The environment for conda",
      default=os.environ.get("RHQ_CONDA_VENV", "")
    )
    parser_queue.add_argument(
        "-p",
        "--priority",
        type=str,
        choices=["1", "2", "3", "4""config.ini", "5"],
        default="3",
        help="The priority of the script" +
        "\nDO NOT DEFINE UNLESS YOU ARE SURE THAT YOU DO NOT NEED HIGHER PRIORITY."
    )

    parser_queue.add_argument(
        "-e",
        "--email",
        type=str,
        help="The email to send to when the script begins and ends.\n" +
        "Can be defined as environment variable (export RHQ_EMAIL=<email>) to always send to that email."
        +
        "This will prefer the email given in the argument line over the environtment variable",
        default=os.environ.get("RHQ_EMAIL", "")
    )

    parser_queue.add_argument(
        "-o",
        "--output-file",
        type=str,
        default="my.stdout",
        help="The file for the output of the script"
    )
    parser_queue.add_argument(
        "-b", "--begin-time", type=str, help="Begin script after (b) seconds")

    parser_queue.add_argument(
        "-t",
        "--titan",
        type=str,
        help="Define the titans that the script can run on. Comma Seperated values"
    )
    parser_queue.add_argument(
      "-a",
      "--args",
      help="the arguments for the script",
      default=[],
      nargs="+"
    )
    parser_queue.add_argument(
      "--test", 
      help="script is a test",
      action="store_true",
      default=False
    )

    # Remove Subparser
    parser_remove = subparsers.add_parser("remove", help="remove help")
    parser_remove.add_argument(
        "job", nargs=1, help="the job id of the job to cancel", type=int)

    args = parser.parse_args()
    if not hasattr(self, args.command):
      print("not found")
      parser.print_help()
      exit(1)
    
    getattr(self, args.command)(args)

  def remove(self, args):
    queue = subprocess.Popen(["squeue"],
                             stdout=subprocess.PIPE).stdout.readlines()
    data = DataGrid(queue)
    data.cancel_job(args.job[0])

  def queue(self, args):
    self.processor.add_scriptline("srun -n1 -l {}".format(args.script), 0)
    self.processor.add_scriptline("export PYTHONUNBUFFERED=1", -5)

    # base sbatch arguments
    self.processor.add_sbatchline("--priority", args.priority)
    self.processor.add_sbatchline("--ntasks", "1")
    self.processor.add_sbatchline("--gres", "gpu:titan:1")
    self.processor.add_sbatchline("-o", args.output_file)

    if args.begin_time:
      self.processor.add_sbatchline("--begin", "now+{}".format(args.begin_time))
      # print(
      #     "begin time approx: {}".format(datetime.datetime.now()+ datetime.timedelta(minutes=int(args.begin_time)))
      # )

    # Handle Email
    if args.email:
      self.processor.add_scriptline("rhqemail start {} {}".format(args.email, args.script), -10)
      self.processor.add_scriptline(
      """if [$? -eq 0]; then
        rhqemail completed {0} {1} 
      else
        rhqemail failed {0} {1}
      fi
      """.format(args.email, args.script ), 2)

    #Handle venv
    if args.venv:
      self.processor.add_scriptline("source {}/bin/activate".format(args.venv), -1)
      self.processor.add_scriptline("deactivate", 1)
      # print("venv: {}".format(args.venv))
    
    if args.conda_venv:
      self.processor.add_scriptline("conda activate {}".format(args.conda_venv), -1)
      self.processor.add_scriptline("conda deactivate", 1)
      # print("conda_venv:{}".format(args.conda_venv))
    
    if args.titan:
      titans = args.titan.split(",") if "," in args.titan else args.titan
      w_string = "titan[{}]" if all(i.isdecimal() for i in titans) else "{}"
      self.processor.add_sbatchline("-w", w_string.format(",".join(titans)))
      # print("titans:{}".format(w_string.format(','.join(titans))))

    self.processor.add_scriptline("chmod +x {}".format(args.script), -2)
    self.processor.write_file()
    script = "sbatch ./{}".format(self.processor.script_name)
    if args.test:
      print(args)
    else:
      subprocess.call(["chmod +x {}".format(args.script)],
                      stdout=subprocess.PIPE,
                      shell=True)
      res = subprocess.call(["{}".format(script)], stdout=subprocess.PIPE, shell=True)
      subprocess.call(["rm ./script.sh"], stdout=subprocess.PIPE, shell=True)
      exit(res)

  def info(self, args):
    info = subprocess.Popen(["squeue"],
                            stdout=subprocess.PIPE,
                            stdin=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True)
    with open("./squeue", "a+") as f:
      f.write(b"".join(info.stdout.readlines()).decode("utf-8"))
    print(getpass.getuser())




class DataGridLine(object):
  def __init__(self, line) -> None:
    self.id = int(line[0])
    self.partition = line[1]
    self.script = line[2]
    self.user = line[3]
    self.state = line[4]
    self.time = line[5]
    self.nodes = line[6]
    self.nodelist = line[7]




if __name__ == "__main__":
  RHQueueParser()