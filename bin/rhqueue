#!/usr/bin/env python3
import argparse
import subprocess
import re
import os
from multiprocessing import Pool
from typing import Dict
from rhqueue import *


class RHQueueParser(object):
  def __init__(self):
    self.processor = ScriptCreatorClass()

    # Main Parser
    parser = argparse.ArgumentParser(description="RHQueue")
    subparsers = parser.add_subparsers(
        help="The subcommand to run options are {queue,remove,info}",
        dest="command")

    # Queue Parser
    parser_queue = subparsers.add_parser("queue", help="Used to queue scripts")
    group = parser_queue.add_mutually_exclusive_group()
    parser_queue.add_argument("script",
                              metavar="script",
                              type=str,
                              help="""
          The script to run on a gpu.
          At the top of each file there must be the shebang '#!/usr/bin/env <python_version>'
          Where <python_version> is the version of python needed, python(for 2.7) or python3
        """)
    # venv defaults
    venv = os.environ.get("RHQ_VENV", "")
    venv = os.environ.get("VIRTUAL_ENV", venv)
    group.add_argument("-v",
                       "--venv",
                       metavar="venv",
                       type=str,
                       help="""
          The virtual environment used for the project. 
          The value is the absolute path to the virtual environment directoy
        """,
                       default=venv)
    group.add_argument("-c",
                       "--conda-venv",
                       metavar="condaVenv",
                       type=str,
                       help="""
        The environment for conda. 
        This is supposed to be the name of the conda environment.
      """,
                       default=os.environ.get("RHQ_CONDA_VENV", ""))
    parser_queue.add_argument(
        "-p",
        "--priority",
        type=str,
        choices=["1", "2", "3", "4", "5"],
        default="3",
        help="The priority of the script" +
        "\nDO NOT DEFINE UNLESS YOU ARE SURE THAT YOU DO NOT NEED HIGHER PRIORITY."
    )

    parser_queue.add_argument("-e",
                              "--email",
                              type=str,
                              help="""
          The email to send to when the script begins and ends.
          Can be defined as environment variable (export RHQ_EMAIL=<email>) to use as a default.
          This will prefer the email given in the argument line over the environtment variable
        """,
                              default=os.environ.get("RHQ_EMAIL", ""))

    parser_queue.add_argument("-o",
                              "--output-file",
                              type=str,
                              default="my.stdout",
                              help="""
          The file for the output of the script.
          This is the path to the file.
          Default is 'my.stdout'
        """)
    parser_queue.add_argument("-b",
                              "--begin-time",
                              type=str,
                              help="Begin script after (b) seconds")

    parser_queue.add_argument(
        "-s",
        "--servers",
        type=str,
        help="Define the servers that the script can run on.")
    parser_queue.add_argument("-a",
                              "--args",
                              help="""
        The arguments for the script. 
        These are passed to the script to run.
        Pass these in the same method as you would normally
      """,
                              default=[],
                              nargs="+")
    parser_queue.add_argument("--test",
                              help="script is a test. Ignore this",
                              action="store_true",
                              default=False)
    parser_queue.add_argument(
        "--script-name",
        help="The name of the script file name that is inserted into the queue",
        type=str)

    # Remove Subparser
    parser_remove = subparsers.add_parser("remove", help="remove help")
    parser_remove.add_argument("job",
                               nargs=1,
                               help="the job id of the job to cancel",
                               type=int)
  
    parser_info = subparsers.add_parser("info", help="info help")
    parser_info.add_argument("--job-id", "-j", help="the job id to get further information about")
    args = parser.parse_args()
    if args.command is None:
      print("No Arguments were given")
      parser.print_help()
      exit(1)
    if not hasattr(self, args.command):
      print("The argument given was not found")
      parser.print_help()
      exit(1)

    getattr(self, args.command)(args)

  def remove(self, args):
    data = SqueueDataGridHandler()
    data.cancel_job(args.job[0])

  def queue(self, args):
    values = handle_slurm_output(
        subprocess.run("scontrol show partitions",
                       stdout=subprocess.PIPE,
                       shell=True).stdout.decode("utf-8"))
    self.open_servers = get_open_servers(values["Nodes"])
    self.processor.add_scriptline(
        "srun -n1 {} {}".format(os.path.abspath(args.script),
                                " ".join(args.args)), 0)
    self.processor.add_scriptline("export PYTHONUNBUFFERED=1", -10)

    # base sbatch arguments
    self.processor.add_sbatchline("--priority", args.priority)
    self.processor.add_sbatchline("--ntasks", "1")
    self.processor.add_sbatchline("--gres", "gpu:titan:1")
    self.processor.add_sbatchline("-o", args.output_file)
    self.processor.add_sbatchline(
        "--job-name", args.script_name if args.script_name else args.script)

    if args.begin_time:
      seconds = parse_time(args.begin_time)
      self.processor.add_sbatchline("--begin", "now+{}".format(seconds))

    # Handle Email
    if args.email:
      self.processor.add_scriptline(
          f"rhqemail start {args.email} {os.path.abspath(args.script)} {' '.join(args.args)}",
          -5)
      self.processor.add_scriptline(
          """if [$? -eq 0]; then
        rhqemail completed {0} {1} 
      else
        rhqemail failed {0} {1}
      fi
      """.format(args.email, args.script), 2)

    #Handle venv
    if args.venv:
      self.processor.add_scriptline("source {}/bin/activate".format(args.venv),
                                    -1)
      self.processor.add_scriptline("deactivate", 1)

    if args.conda_venv:
      self.processor.add_scriptline(
          "conda activate {}".format(args.conda_venv), -1)
      self.processor.add_scriptline("conda deactivate", 1)

    if args.servers:
      servers = set(self.open_servers) - set(args.servers.split(","))
      self.processor.add_sbatchline("-x", ",".join(servers))

    self.processor.add_scriptline("chmod +x {}".format(args.script), -2)
    self.processor.write_file()

    if args.test:
      print(args)
    else:
      subprocess.call(["chmod +x {}".format(args.script)],
                      stdout=subprocess.PIPE,
                      shell=True)
      res = subprocess.run(self.processor.get_script_command_line(),
                           stdout=subprocess.PIPE,
                           shell=True)
      subprocess.call(["rm ./script.sh"], stdout=subprocess.PIPE, shell=True)
      exit(res.returncode)

  def info(self, args):
    info = SqueueDataGridHandler()
    if args.job_id:
      info.print_extra_information(args.job_id)
    else:
      info.print_vals(10, 0, 3, 2, 5, 4)
      


if __name__ == "__main__":
  RHQueueParser()