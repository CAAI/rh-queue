= RHQueue =
This script is for queueing and canceclling scripts to be run on the titan servers
It's usage is <code>rhqueue queue <args> <script></code> or <code>rhqueue remove <job_id></code>.
The args for <code>rhqueue queue</code> are:
An average use would look like:

<code>rhqueue -s titan[1,2,5] code.py</code>

<code>rhqueue info</code>

<code>rhqueue info -j 1123</code>
= General =
== Shebang ==
The python script that is going to be added must use the correct python executable. to do this shebang must point to the correct executable in the shebang. This can be done by using:
<code>#!/usr/bin/env python3</code>


== Environment Variables ==
Can be defined as environment variable (<code>export RHQ_EMAIL=<email></code>) to use as a default. This will prefer the email given in the argument line over the environment variable
= Queue =
== Usage ==
    
<code>rhqueue queue [-h] [-v [VENV] | -c [CONDAVENV]]
                    [--source-script SOURCE_SCRIPT] [-p {1,2,3,4,5}]
                    [-e EMAIL] [-o OUTPUT_FILE] [-b BEGIN_TIME] [-s SERVERS]
                    [-a ARGS [ARGS ...]] [--test] [--script-name SCRIPT_NAME]
                    script</code>

== Positional Arguments ==

=== Script ===
''' Usage '''
<code>rhqueue queue <script></code>

''' Description '''
The script to run on a gpu. 

''' Examples '''
command-line: <code>rhqueue queue <script></code>


== Optional Arguments ==

=== Virtual Environment ===
''' Usage '''
<code>-v <venv>, --venv <venv></code>

''' Description '''
The virtual environment used for the project. The value is the absolute path to the virtual environment directoy

''' Example '''
<code>rhqueue queue -v /homes/pmcd/venv/test-venv script.py</code>

=== Conda Environment ===
''' Usage ''' 
<code>-c condaVenv, --conda-venv condaVenv </code>

''' Description '''
The environment for conda. This is supposed to be the name of the conda environment.

''' Example '''
<code>rhqueue queue -c test-conda script.py</code>


=== Priority ===
''' Usage '''
<code>-p {1,2,3,4,5}, --priority {1,2,3,4,5}</code>

''' Description '''
The priority of the script, default is 3.

''' Example '''
<code>rhqueue queue -p 4 script.py</code>


=== Email ===
''' Usage '''
<code>-e EMAIL, --email EMAIL</code>

''' Description '''
The email to send to when the script begins and ends(completed or failed).

''' Example '''
<code>rhqueue queue --email jens.jensen@regionh.dk script.py</code>


=== Output File ===
''' Usage '''
<code>-o OUTPUT_FILE, --output-file OUTPUT_FILE</code>

''' Argument Type '''
<code>OUTPUT_FILE</code> is a path to the location of the file is relative to where the script is run

''' Description '''
The file for the output of the script. This is the path to the file. Default is <code>my.stdout</code>

''' Example '''
<code>rhqueue queue -o test.stdout script.py</code>
The output will be written to file <code>test.stdout</code>


=== Begin Time ===
''' Usage '''
<code>-b BEGIN_TIME, --begin-time BEGIN_TIME</code>

''' Description '''
Run script after minimal amount of time has passed. This is handles a string defining the number of days, hours, minutes, and seconds.

''' Examples '''
<code>rhqueue queue -b 60s script.py</code>
The begin time will be earliest 60 seconds after the script is queued.
<code>rhqueue queue -b 1h60s script.py</code>
<code>rhqueue queue -b 1d script.py</code>
<code>rhqueue queue -b 1d1m script.py</code>
<code>rhqueue queue -b 1h script.py</code>
<code>rhqueue queue -b 1m script.py</code>
<code>rhqueue queue -b 1s script.py</code>



=== Servers ===
''' Usage '''
<code>-s SERVERS, --servers SERVERS</code>

''' Description '''
Define the servers that the script can run on as a comma separated list. The script will run on the first available of the servers selected. These can be defined explicity or in a simplified manner by using brackets for server that share the same prefix. In the backets can be a comma seperated list of ranges or integers.
For example the list <code>titan1,titan2,titan3</code> can be shorted to <code>titan[1,2,3]</code> or <code>titan[1-3]</code>
Another example is <code>titan1,titan2,titan3,ibm2</code> can be shorted to <code>titan[1-3],ibm2</code>

''' Example '''
<code>rhqueue queue -s titan[1-3] script.py</code>

Will run the script on any of titan 1,2, or 3


=== Script Arguments ===
''' Usage '''
<code>-a ARGS [ARGS ...], --args ARGS [ARGS ...]</code>

''' Description '''
The arguments for the script. These are passed to the script to run. Pass these in the same method as you would normally

''' Example '''
<code>rhqueue queue sum.py --args 1 2 3 4 5</code>


=== Script Name ===
'''Usage'''
<code>--script-name SCRIPT_NAME</code>

'''Description'''
This declares the name of the script to be placed into slurm. The Default value is <code>script.sh</code>.

'''Example'''
<code>rhqueue queue --script-name code.sh script.py</code>

=== Script Name ===
''' Usage '''
<code>--script-name SCRIPT_NAME</code>

''' Description '''
Sets the name of the script that is placed in the queue.

''' Example '''
<code>rhqueue queue --script-name foo script.py</code>
Names the script <code>foo</code>.

=== Test Script ===
''' Usage '''
<code>--test</code>

''' Description '''
Declares that the script is a test. This will not queue the script

''' Example '''
<code>rhqueue queue --test script.py</code>


== Full Examples ==
* <code>rhqueue queue -s titan[1,2,3] -v /homes/pmcd/venv/test-venv -e jens.jensen@regionh.dk sum.py --args 1 2 3 4 5</code>
** This will queue the script <code>sum.py</code> with the virtual environtment <code>test-slurm</code>, run on one of the titans 1, 2, or 3, with the arguments 1,2,3,4 and 5, while sending an email to <code>jens.jensen@regionh.dk</code>

= Remove =
The rhqueue also allows for the removal or cancellation of a queued script.

== Usage ==
<code>rhqueue remove [-h] job</code>

== Positional Arguments ==

=== Job ===

''' Description '''
The id of the job to cancel can be found by using <code>rhqueue info</code>

'''Usage'''
<code>rhqueue remove <job_id></code>

'''Example '''
<code>rhqueue remove 123</code>

= Info =
This argument is used to look at the queue of scripts

== Optional Arguments ==
=== Job ID ===
'''Usage'''
<code>--job-id JOB_ID, -j JOB_ID</code>

'''Description'''
This is the job id to get more information on.


'''Example'''
<code>rhqueue info -j 1345</code>

== Usage ==
<code>rhqueue info [-h] [--job-id JOB_ID]</code>

''' Example '''
<code>rhqueue info</code>
